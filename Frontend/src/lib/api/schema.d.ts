/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Card */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Card"];
                    "text/json": components["schemas"]["Card"];
                    "application/*+json": components["schemas"]["Card"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Card */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Card"];
                    "text/json": components["schemas"]["Card"];
                    "application/*+json": components["schemas"]["Card"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete Card */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Change Card Status */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cardId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Card"];
                    "text/json": components["schemas"]["Card"];
                    "application/*+json": components["schemas"]["Card"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/decks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Decks
         * @description Returns a list of decks. You can filter by user and name.
         */
        get: {
            parameters: {
                query?: {
                    user?: string;
                    name?: string;
                    amount?: number;
                    sort?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deck"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /** Create Deck */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Deck"];
                    "text/json": components["schemas"]["Deck"];
                    "application/*+json": components["schemas"]["Deck"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/{deckId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Deck Info */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deckId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Deck"];
                        "application/json": components["schemas"]["Deck"];
                        "text/json": components["schemas"]["Deck"];
                    };
                };
            };
        };
        /** Update Deck */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deckId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Deck"];
                    "text/json": components["schemas"]["Deck"];
                    "application/*+json": components["schemas"]["Deck"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete Deck */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deckId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/{deckId}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Cards of a Deck */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deckId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Card"][];
                        "application/json": components["schemas"]["Card"][];
                        "text/json": components["schemas"]["Card"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/{deckId}/study": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Study a Deck */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deckId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["StudyDeckResponse"];
                        "application/json": components["schemas"]["StudyDeckResponse"];
                        "text/json": components["schemas"]["StudyDeckResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get by Username */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Card: {
            /** Format: uuid */
            readonly id?: string;
            /** Format: uuid */
            deckId?: string | null;
            front?: string | null;
            back?: string | null;
            status?: components["schemas"]["NullableOfCardStatus"];
        };
        Deck: {
            /** Format: uuid */
            readonly id?: string | null;
            name?: string | null;
            description?: string | null;
            /**
             * Format: uuid
             * @description ID of the Creator
             */
            readonly creatorId?: string | null;
            /** @description Username of the Creator */
            readonly creatorName?: string | null;
            /** @description Url-friendly name used for routing. */
            readonly encodedName?: string | null;
            statistics?: components["schemas"]["DeckStatistics"];
        };
        DeckStatistics: {
            /**
             * Format: int32
             * @description Number of cards that have not been seen yet.
             * @default 0
             */
            notSeen: number;
            /**
             * Format: int32
             * @description Number of cards answered correctly.
             * @default 0
             */
            correct: number;
            /**
             * Format: int32
             * @description Number of cards answered incorrectly.
             * @default 0
             */
            incorrect: number;
            /**
             * Format: int32
             * @description Total amount of cards in this deck.
             * @default 0
             */
            total: number;
        } | null;
        /** @enum {unknown|null} */
        NullableOfCardStatus: "NotSeen" | "Again" | "Good" | "Easy" | null;
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        };
        StudyDeckResponse: {
            card: components["schemas"]["Card"];
            /** Format: int32 */
            left: number;
        };
        User: {
            /** Format: uuid */
            id: string;
            username: string;
            picture?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type Card = components['schemas']['Card'];
export type Deck = components['schemas']['Deck'];
export type DeckStatistics = components['schemas']['DeckStatistics'];
export type NullableOfCardStatus = components['schemas']['NullableOfCardStatus'];
export type ProblemDetails = components['schemas']['ProblemDetails'];
export type StudyDeckResponse = components['schemas']['StudyDeckResponse'];
export type User = components['schemas']['User'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
